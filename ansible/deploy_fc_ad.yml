---
- hosts: localhost
  gather_facts: no
  user: root
  vars_files:
    - vars/common.yaml
    - vars/vmware.yaml
  vars:
    MAC: "{{ MAC_Firecrest_latest }}"
  tasks:
  - name: Destroy Virtual Machine
    community.vmware.vmware_guest:
        validate_certs: False
        hostname: "{{ config_vsphere_host }}"
        username: "{{ config_vsphere_user }}"
        password: "{{ config_vsphere_password }}"
        datacenter: "{{ config_vsphere_datacenter }}"
        cluster: "{{ config_vsphere_cluster }}"
        folder: "/{{ config_vsphere_folder }}"
        name: "{{ config_vm_name }}"
        state: "absent"
        force: yes

  - name: Create Virtual Machine
    community.vmware.vmware_guest:
        validate_certs: False
        hostname: "{{ config_vsphere_host }}"
        username: "{{ config_vsphere_user }}"
        password: "{{ config_vsphere_password }}"
        datacenter: "{{ config_vsphere_datacenter }}"
        cluster: "{{ config_vsphere_cluster }}"
        folder: "/{{ config_vsphere_folder }}"
        name: "{{ config_vm_name }}"
        guest_id: "{{ config_vm_guest }}"
        disk:
        - size_gb: 20
          type: thin
          datastore: "{{ config_vm_datastore }}"
        - size_gb: 16
          type: thin
          datastore: "{{ config_vm_datastore }}"
        - size_gb: 16
          type: thin
          datastore: "{{ config_vm_datastore }}"
        - size_gb: 16
          type: thin
          datastore: "{{ config_vm_datastore }}"
        - size_gb: 16
          type: thin
          datastore: "{{ config_vm_datastore }}"
        hardware:
          memory_mb: 10240
          num_cpus: 4
          scsi: lsilogic
        networks:
        - name: "{{ config_vm_net2 }}"
          mac: "{{ MAC | community.general.random_mac }}"
          device_type: vmxnet3
        - name: "{{ config_vm_net1 }}"
          device_type: vmxnet3
        wait_for_ip_address: True
        wait_for_ip_address_timeout: 1200

  - name: Gather some info from a guest using the vSphere API output schema
    community.vmware.vmware_guest_info:
       hostname: "{{ config_vsphere_host }}"
       username: "{{ config_vsphere_user }}"
       password: "{{ config_vsphere_password }}"
       validate_certs: no
       datacenter: "{{ config_vsphere_datacenter }}"
       name: "{{ config_vm_name }}"
    register: vm_info

  - set_fact:
       vm_fc_ip: "{{ vm_info.instance.ipv4 }}"
  - debug: msg="{{ vm_info }}"

  - copy: content="{{ vm_info.instance.ipv4 }}" dest="{{ config_vm_name }}.ipv4"

  - name: Wait for SSH Port to Become Open and Contain "OpenSSH"
    wait_for:
        port: 22
        host: "{{ vm_fc_ip }}"
        search_regex: "OpenSSH"

  - name: Add IP to VMName to inventory
    add_host:
        name: "{{ config_vm_name }}"
        ansible_ssh_host: "{{ vm_info.instance.ipv4 }}"
        ansible_ssh_user: "{{ config_applaince_root }}"
        ansible_ssh_pass: "{{ config_applaince_root_pass }}"
        ansible_connection: "ssh"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

# Configure and join to AD part
- hosts: "{{ config_vm_name }}"
  gather_facts: yes
  user: "{{ config_applaince_root }}"
  vars_files:
    - vars/common.yaml
  tasks:
  - name: Create FS
    shell: zfs create {{config_applaince_pool}}/{{config_applaince_pool_fs}}

  - name: Share FS
    shell: zfs set sharesmb=on {{config_applaince_pool}}/{{config_applaince_pool_fs}}

  - name: Give all ACL's
    shell: chmod 777 /{{config_applaince_pool}}/{{config_applaince_pool_fs}}

  - name: FIX smbpasswd
    shell: echo "root:0::C06B4988507F79FBA2280897378B5973" >> /var/smb/smbpasswd

  - name: Join NS to AD
    block:
      - name: Set full ACL for directory
        command: chmod 777 /"{{ config_applaince_pool }}"/"{{ config_applaince_pool_fs }}"
      - name: Set DNS server for AD Server
        shell: echo nameserver "{{ ad_ip }}" > /etc/resolv.conf
      - name: Disable NTP
        command: svcadm disable ntp
      - name: sync time with AD
        command: ntpdate "{{ ad_name }}"
      - name: sync time with AD
        command: /usr/sbin/smbadmn -y -u  "{{ ad_admin }}%{{ ad_admin_pass }}" "{{ ad_name }}"
    when: ad_name is defined and ad_ip is defined
    rescue:
      - debug:
          msg: 'UNABLE TO JOIN TO AD. SUCKS!'
...
